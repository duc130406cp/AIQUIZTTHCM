
let currentQuestion = 0;
let score = 0;
let questionsToShow = [];
const optionLabels = ['A', 'B', 'C', 'D'];

function showLoading() {
  const overlay = document.getElementById("loadingOverlay");
  if (overlay) overlay.style.display = "flex";
}

function hideLoading() {
  const overlay = document.getElementById("loadingOverlay");
  if (overlay) overlay.style.display = "none";
}

function resetQuiz() {
  document.getElementById('quiz').style.display = 'none';
  document.getElementById('quiz').innerHTML = `
      <div id="questionNumber" style="margin-bottom: 10px; font-weight: bold;"></div>
      <p id="question"></p>
      <div id="options"></div>
      <button id="submitBtn" onclick="submitAnswer()">N·ªôp</button>
      <div id="feedback"></div>
      <button id="nextBtn" onclick="nextQuestion()">C√¢u ti·∫øp theo</button>
  `;
  document.getElementById('setup').style.display = 'block';
}

async function startQuiz() {
  const selectedTopic = document.getElementById("topicSelect").value;
  const numQuestions = parseInt(document.getElementById("numQuestions").value);
  if (numQuestions > 10) {
    alert("ü§ñ Tr·ª£ gi·∫£ng AI ƒëang t·∫°o b·ªô ƒë·ªÅ ho√†n ch·ªânh... Vui l√≤ng ch·ªù.");
  }

  try {
    showLoading();
    questionsToShow = await retry(() => generateQuestionsFromGPT(selectedTopic, numQuestions));
    hideLoading();

    if (!questionsToShow || !Array.isArray(questionsToShow) || questionsToShow.length === 0 || !questionsToShow[0].explanation) {
      throw new Error("ƒê·ªãnh d·∫°ng d·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá.");
    }
    currentQuestion = 0;
    score = 0;
    document.getElementById("setup").style.display = "none";
    document.getElementById("quiz").style.display = "block";
    showQuestion();

  } catch (err) {
    hideLoading();
    console.error("‚ùå L·ªói ·ªü startQuiz sau khi ƒë√£ th·ª≠ l·∫°i:", err);
    
    let userMessage = "Kh√¥ng t·∫°o ƒë∆∞·ª£c c√¢u h·ªèi. Vui l√≤ng ki·ªÉm tra API Key ho·∫∑c th·ª≠ l·∫°i sau.";
    const errorMessageLower = err.message.toLowerCase();
    if (errorMessageLower.includes("overloaded")) {
        userMessage = "ü§ñ Tr·ª£ gi·∫£ng AI ƒëang r·∫•t b·∫≠n. Vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t.";
    } else if (errorMessageLower.includes("api key not valid")) {
        userMessage = "API Key c·ªßa b·∫°n kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.";
    }
    alert(userMessage);
  }
}

function showQuestion() {
  const q = questionsToShow[currentQuestion];
  document.getElementById("questionNumber").textContent = `C√¢u ${currentQuestion + 1} / ${questionsToShow.length}`;
  document.getElementById("question").textContent = q.question;
  
  let opts = "";
  q.options.forEach((opt, i) => {
    opts += `<label style="display: block; margin-bottom: 8px;">
               <input type="radio" name="opt" value="${i}" style="margin-right: 8px;">
               <b>${optionLabels[i]}.</b> ${opt}
             </label>`;
  });

  document.getElementById("options").innerHTML = opts;
  document.getElementById("feedback").innerHTML = "";
  document.getElementById("nextBtn").style.display = "none";
  document.getElementById("submitBtn").style.display = "inline-block";
  document.getElementById("submitBtn").disabled = false;
}

function submitAnswer() {
  const selected = document.querySelector('input[name="opt"]:checked');
  if (!selected) {
    alert("B·∫°n ch∆∞a ch·ªçn ƒë√°p √°n!");
    return;
  }
  document.getElementById("submitBtn").disabled = true;
  document.querySelectorAll('input[name="opt"]').forEach(radio => radio.disabled = true);
  
  const ans = parseInt(selected.value);
  const q = questionsToShow[currentQuestion];
  const resultContainer = document.getElementById("feedback");
  const explanationHtml = `<br><b>ü§ñ Tr·ª£ gi·∫£ng AI gi·∫£i th√≠ch:</b> ${q.explanation || "Kh√¥ng c√≥ gi·∫£i th√≠ch chi ti·∫øt."}`;
  
  if (ans === q.answer) {
    score++;
    resultContainer.innerHTML = `‚úÖ Ch√≠nh x√°c! ${explanationHtml}`;
  } else {
    // Th√™m nh√£n A, B, C, D v√†o th√¥ng b√°o ƒë√°p √°n ƒë√∫ng
    const correctLabel = optionLabels[q.answer];
    resultContainer.innerHTML = `‚ùå Sai. ƒê√°p √°n ƒë√∫ng l√†: <b>${correctLabel}. ${q.options[q.answer]}</b> ${explanationHtml}`;
  }
  
  document.getElementById("nextBtn").style.display = "inline-block";
  document.getElementById("submitBtn").style.display = "none";
}

function nextQuestion() {
  currentQuestion++;
  if (currentQuestion < questionsToShow.length) {
    showQuestion();
  } else {
    showFinalResult();
  }
}

async function showFinalResult() {
    const topicLabel = document.getElementById("topicSelect").selectedOptions[0].textContent;
    const resultDiv = document.getElementById("quiz");
    resultDiv.innerHTML = `<h2>üéØ K·∫øt qu·∫£: ${score}/${questionsToShow.length}</h2><p><i>ü§ñ Tr·ª£ gi·∫£ng AI ƒëang vi·∫øt nh·∫≠n x√©t t·ªïng k·∫øt...</i></p>`;
    showLoading();
    try {
        const advice = await getAdviceFromGemini(score, questionsToShow.length, topicLabel);
        hideLoading();
        resultDiv.innerHTML = `
            <h2>üéØ K·∫øt qu·∫£: ${score}/${questionsToShow.length}</h2>
            <p><strong>ü§ñ Tr·ª£ gi·∫£ng AI nh·∫≠n x√©t:</strong><br>${advice.replace(/\n/g, '<br>')}</p>
            <button onclick="resetQuiz()">L√†m l·∫°i b√†i kh√°c</button> 
        `;
    } catch (error) {
        hideLoading();
        console.error("L·ªói khi nh·∫≠n x√©t t·ªïng k·∫øt:", error);
        resultDiv.innerHTML = `
            <h2>üéØ K·∫øt qu·∫£: ${score}/${questionsToShow.length}</h2>
            <p><strong>ü§ñ Tr·ª£ gi·∫£ng AI g·∫∑p l·ªói khi nh·∫≠n x√©t.</strong></p>
            <button onclick="resetQuiz()">L√†m l·∫°i b√†i kh√°c</button>
        `;
    }
}

async function getAdviceFromGemini(score, total, topic) {
  const apiKey = sessionStorage.getItem("API_KEY");
  const prompt = `M·ªôt sinh vi√™n v·ª´a l√†m b√†i ki·ªÉm tra tr·∫Øc nghi·ªám m√¥n T∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh.
- Ch·ªß ƒë·ªÅ: "${topic}"
- S·ªë c√¢u: ${total}
- K·∫øt qu·∫£: ${score}/${total} ƒë√∫ng.
D·ª±a v√†o k·∫øt qu·∫£ n√†y, h√£y ƒë∆∞a ra nh·∫≠n x√©t t·ªïng quan (kho·∫£ng 7-10 d√≤ng), ph√¢n t√≠ch ƒëi·ªÉm m·∫°nh, y·∫øu v√† ƒë∆∞a ra l·ªùi khuy√™n √¥n t·∫≠p. Gi·ªçng vƒÉn th√¢n thi·ªán, ƒë·ªông vi√™n.`;
  const res = await fetch("http://localhost:3000/api/gemini", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ prompt, apiKey })
  });
  const data = await res.json();
  if (data.errorMessage) {
    throw new Error(data.errorMessage);
  }
  return data.result || "Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh b√†i ki·ªÉm tra!";
}

async function generateQuestionsFromGPT(topicValue, num) {
  const apiKey = sessionStorage.getItem("API_KEY");
  let topicText = "";
  if (topicValue === "custom") {
    topicText = document.getElementById("customTopicText").value.trim();
    if (!topicText) {
      alert("B·∫°n ch∆∞a nh·∫≠p n·ªôi dung ch·ªß ƒë·ªÅ tu·ª≥ ch·ªçn!");
      return null;
    }
  }

  const topicMap = {
    1: "ƒë·ªëi t∆∞·ª£ng, ph∆∞∆°ng ph√°p v√† √Ω nghƒ©a h·ªçc TTHCM",
    2: "c∆° s·ªü v√† qu√° tr√¨nh h√¨nh th√†nh TTHCM",
    3: "TTHCM v·ªÅ ƒë·ªôc l·∫≠p d√¢n t·ªôc v√† CNXH",
    4: "TTHCM v·ªÅ ƒê·∫£ng v√† Nh√† n∆∞·ªõc c·ªông s·∫£n",
    5: "TTHCM v·ªÅ ƒë·∫°i ƒëo√†n k·∫øt d√¢n t·ªôc v√† qu·ªëc t·∫ø",
    6: "TTHCM v·ªÅ vƒÉn ho√°, ƒë·∫°o ƒë·ª©c, con ng∆∞·ªùi"
  };

  const subject = topicValue === "custom" ? topicText : topicValue === "all" ? Object.values(topicMap).join('; ') : topicMap[topicValue];

  const prompt = `T·∫°o ${num} c√¢u h·ªèi tr·∫Øc nghi·ªám T∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh v·ªÅ ch·ªß ƒë·ªÅ: '${subject}'.
Y√™u c·∫ßu:
- C√¢u h·ªèi ph·∫£i m·ªõi, kh√¥ng l·∫∑p l·∫°i. ID y√™u c·∫ßu: ${Date.now()}.
- B√°m s√°t gi√°o tr√¨nh ƒë·∫°i h·ªçc.
- ƒê·ªãnh d·∫°ng JSON array, m·ªói object c√≥: "question", "options" (m·∫£ng 4), "answer" (s·ªë 0-3), "explanation" (chi ti·∫øt, 3-5 d√≤ng).
- Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng markdown hay vƒÉn b·∫£n kh√°c.`;

  try {
    const res = await fetch("http://localhost:3000/api/gemini", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ prompt, apiKey })
    });

    const data = await res.json();
    console.log("D·ªØ li·ªáu g·ªëc t·ª´ Gemini:", data);

    if (data.errorMessage) {
      throw new Error(data.errorMessage);
    }
    
    let cleanText = data.result.replace(/```json/g, "").replace(/```/g, "").trim();
    const jsonStart = cleanText.indexOf('[');
    const jsonEnd = cleanText.lastIndexOf(']') + 1;
    
    if (jsonStart === -1 || jsonEnd === 0) {
      throw new Error("Ph·∫£n h·ªìi t·ª´ AI kh√¥ng ch·ª©a JSON array h·ª£p l·ªá.");
    }
    
    let jsonStr = cleanText.substring(jsonStart, jsonEnd);
    jsonStr = jsonStr.replace(/,\s*([}\]])/g, "$1");
    return JSON.parse(jsonStr);

  } catch (err) {
    console.error("‚ùå L·ªói khi g·ªçi API ho·∫∑c parse JSON:", err);
    throw err;
  }
}